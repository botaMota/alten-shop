openapi: '3.0.3'
info:
  title: Ecommerce-Api
  license:
    name: License Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: v1
  description: This api is used to get ecommerce products information.
  contact:
    name: BOUTAHIR EL MOUTAOUKIL
    email: boutahir.elmoutaoukil@gmail.com
servers:
  - url: http://localhost:8080
    description: local server for test purpose

paths:
  /products:
    get:
      summary: Retrieve all products
      operationId: getProducts
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
      responses:
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageableResponse'
    post:
      summary: Add a new product
      requestBody:
        description: A JSON object containing product information
        operationId: createProduct
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductDTO"
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /products/{id}:
    get:
      summary: Retrieve details for product by id
      operationId: getProductById
      parameters:
        - name: id
          in: path
          description: Unique id of product
          required: true
          schema:
            type: integer
      responses:
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    patch:
      summary: Update details of product 1 if it exists
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          description: Unique id of product
          required: true
          schema:
            type: integer
      requestBody:
        description: A JSON object containing product information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductDTO"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    delete:
      summary: Remove product by id
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: Unique id of product
          required: true
          schema:
            type: integer
      responses:
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

components:
  schemas:
    Response:
      type: object
      description: Global Response
      properties:
        code:
          type: integer
        timestamp:
          type: string
        data:
          type: object
    PageableResponse:
      type: object
      description: Meta response for collection fetch
      properties:
        code:
          type: integer
        timestamp:
          type: string
        data:
          $ref: '#/components/schemas/Collections'
        links:
          $ref: '#/components/schemas/Links'
        meta:
          $ref: '#/components/schemas/Meta'
    Collections:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/ProductDTO'
    ProductDTO:
      type: object
      description: Product description
      properties:
        id:
          type: integer
        code:
          type: string
        name:
          type: string
        description:
          type: string
        image:
          type: string
        category:
          type: string
        price:
          type: number
          format : double
        quantity:
          type: integer
        internalReference:
          type: string
        shellId:
          type: integer
        inventoryStatus:
          type: string
          enum:
            - INSTOCK
            - LOWSTOCK
            - OUTOFSTOCK
        rating:
          type: integer
        createdAt:
          type: number
          format: double
        updatedAt:
          type: number
          format: double
          
    Links:
      type: object
      x-examples: { }
      description: Links object for pagination
      properties:
        first:
          type: string
          description: Link to the first page
        last:
          type: string
          description: Link to the last page
        prev:
          type: string
          description: Link to the previous page
        current:
          type: string
          description: Link to the current page
        next:
          type: string
          description: Link to the next page
      x-tags:
        - Technical
    Meta:
      type: object
      x-examples: { }
      description: Meta object for pagination
      properties:
        total_size:
          type: integer
          description: Total number of objects
        result_size:
          type: integer
          description: Number of returned objects
        pages:
          type: integer
          description: Number of available pages
        page_size:
          type: integer
          description: Number of objects in the page
        first_page:
          type: integer
          description: 'Number of the first page, always 1'
        last_page:
          type: integer
          description: Number of the last page
        previous_page:
          type: integer
          description: Number of the previous page
        current_page:
          type: integer
          description: Number of the current page
        next_page:
          type: integer
          description: Number of the next page
      x-tags:
        - Technical
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: string
        timeStamp:
          type: string
  parameters:
    per-page:
      name: per-page
      in: query
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100
      description: Number of objects returned on the page
    page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      description: Page number